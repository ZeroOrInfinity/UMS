spring:
  profiles:
    active: dev
  session:
    # 要导入相应的 spring-session 类的依赖, 默认为 none, 分布式服务应用把 session 放入 redis, mongodb 等中间件
    store-type: redis
    timeout: PT600S
    # session redis 缓存设置
    redis:
      # redis 刷新模式
      flush-mode: on_save
      # redis 命名空间
      namespace: spring:session
      # Cron expression for expired session cleanup job
      cleanup-cron: 5 * * * * *
  # 设置缓存为 Redis
  cache:
    type: redis
  # thymeleaf
  thymeleaf:
    encoding: utf-8
    prefix: classpath:/templates/
    suffix: .htm
    servlet:
      content-type: text/html;charset=UTF-8
  # jackson
  jackson:
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: GMT+8


server:
  port: 8080
  servlet:
    # tomcat session 设置
    session:
      timeout: PT600S
      cookie:
        max-age: PT600S
        # session 的 cookie name, 默认为: JSESSIONID
        name: SID

ums:
  client:
    login-page: /login
    # 登录失败页
    failure-url: /login
    # 设置登录后返回格式(REDIRECT 与 JSON): 默认 JSON
    login-process-type: redirect
    # 设置处理登录表单的 uri，不需要用户实现此 uri，由 Spring security 自动实现， 默认为 /authentication/form
    login-processing-url: /authentication/form
    # 登录成功页
    success-url: /
    # 设置登出 url, 默认为 /logout
    logout-url: /logout
    # 设置登出后跳转的 url, 默认为 /login
    logout-success-url: /login
    # 设置登录时用户名的 request 参数名称, 默认为 username
    usernameParameter: username
    # 设置登录时用户密码的 request 参数名称, 默认为 password
    passwordParameter: password
    # 登录后是否利用 Referer 进行跳转, 默认为: true
    useReferer: true
    # 设置由客户端决定认证成功要跳转的 url 的 request 参数名称, 默认为 redirectTargetUrl
    targetUrlParameter: redirectTargetUrl
    # 是否开启根据不同的uri跳转到相对应的登录页, 默认为: false, 当为 true 时还需要配置 loginUnAuthenticationRoutingUrl 和 authRedirectSuffixCondition
    open-authentication-redirect: true
    # 当请求需要身份认证时，默认跳转的url 会根据 authJumpSuffixCondition 条件判断的认证处理类型的 url，默认实现 /authentication/require,
    # 当 openAuthenticationRedirect = true 时生效.
    login-un-authentication-routing-url: /authentication/require
    # 设置 uri 相对应的跳转登录页, 例如：key=/**: value=/login.html, 用等号隔开key与value, 如: /**=/login.html, 默认为空.
    # 当 openAuthenticationRedirect = true 时生效.
    # 支持通配符, 匹配规则： /user/aa/bb/cc.html 匹配 pattern：/us?r/**/*.html, /user/**, /user/*/bb/c?.html, /user/**/*.*.
    # 规则具体看 AntPathMatcher.match(pattern, path)
    auth-redirect-suffix-condition:
      - '/hello=/login2'
      - '/user/**=/login'
      - '/order/**=/login'
      - '/file/**=/login'
      - '/social/**=/signIn.html'
    # 不需要认证的静态资源 urls, 例如: /resources/**, /static/**
    ignoring-urls:
      - /static/**
    # 不需要认证的 uri, 默认为 空 Set.
    permit-urls:
      - /**/*.html
      - /testSign
      - /testSignOfLastSevenDays/**
      - /testDelOfCurrentMonth

    # ============= remember-me =============
    # 设置记住我功能的缓存时长，默认 14 天. If a duration suffix is not specified, seconds will be used.
    # 记住我功能默认通过 org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl 存入数据库中
    # 实现 BasedRememberMeTokenRepositoryFactory 可以自定义缓存方式
    remember-me:
      remember-me-timeout: P14D
      remember-me-cookie-name: REMEMBER_ME
      remember-me-parameter: REMEMBER_ME
      # 当为 true 时 REMEMBER_ME 只能用于 https, 默认为 false
      use-secure-cookie: false

    # session 设置
    session:
      session-creation-policy: always
      # 当为 false 时允许单个用户拥有任意数量的 session（不同设备或不同浏览器），默认为 false。 当设置 true 时，同时请设置一下选项：maximumSessions 和 maxSessionsPreventsLogin
      session-number-control: false
      # 当设置为 1 时，maxSessionsPreventsLogin 为 false 时，同个用户登录会自动踢掉上一次的登录状态。 当设置为 1 时，maxSessionsPreventsLogin 为 true 时，同个用户登录会自动自动拒绝用户再登录。 默认为 1。 如要此选项生效，sessionNumberControl 必须为 true
      maximum-sessions: 1
      # 同个用户达到最大 maximumSession 后，当为 true 时自动拒绝用户再登录，当为 false 时自动踢掉上一次的登录状态, 默认为 false。 如要此选项生效，sessionNumberControl 必须为 true
      max-sessions-prevents-login: false
      # 如果设置为true，则允许HTTP会话在网址中使用HttpServletResponse.encodeRedirectURL（String）或HttpServletResponse.encodeURL（字符串）时被改写，被包含在URL，
      # 否则不允许HTTP会话。 这可以防止信息泄漏到外部域, 默认为: false
      enable-session-url-rewriting: false
      # concurrent session 失效后跳转地址, login-process-type=redirect 时有效. 默认: /
      invalid-session-of-concurrent-url: /concurrentSession.html
      # session 失效后跳转地址, login-process-type=redirect 时有效. 默认: /session/invalid,
      invalid-session-url: /session/invalid
      # session 的 cookie name, 默认为: JSESSIONID, 需要与 server.servlet.session.cookie.name 同时设置
      session-cookie-name: SID

    # ============= csrf =============
    csrf:
      # csrf 是否开启, 默认为 false;
      csrf-is-open: false
      # 忽略指定请求的 CSRF 防护, 默认为 空 Set
      ignoring-ant-matcher-urls:
#        - /authentication/form
#        - /authentication/mobile
#        - /authentication/social
#        - /logout
        - /user/**
        - /file/**
      # csrf tokenRepository 的存储类型, 默认为 session. 因为 session 可以配置缓存在 redis 等, 也可以自己自定义, 例如: redis
      token-repository-type: session
    # ============= 匿名用户配置 =============
    anonymous:
      # ANONYMOUS 是否开启, 默认为 true;
      anonymous-is-open: true
      # 匿名用户名称, 默认为 ANONYMOUS
      principal: ANONYMOUS
      # 匿名用户权限 list, 默认为 ROLE_ANONYMOUS
      authorities:
        - ROLE_ANONYMOUS
        - /test/permission:add
        - /test/permission:list
        - /test/pass/:list

  # 签到功能 设置
  sign:
    # 获取最近几天的签到情况, 不能大于 28 天, 默认为 7 天
    last-few-days: 10
    # 用于 redis 签到 key 前缀，默认为： u:sign:
    sign-key-prefix: 'u:sign:'
    # 用于 redis 总签到 key 前缀，默认为： total:sign:
    total-sign-key-prefix: 'total:sign:'
    # redis key(String) 转 byte[] 转换时所用的 charset
    charset: UTF-8
    # 用户签到统计 redis key TTL, 默认: 二个月 , 单位: 秒
    total-expired: 5356800
    # 用户签到 redis key TTL, 默认: 二个月 , 单位: 秒
    user-expired: 5356800


  # 验证码配置
  # 同一个 uri 由多种验证码同时配置, **优先级**如下:
  #  `SMS > CUSTOMIZE > SELECTION > TRACK > SLIDER > IMAGE`
  codes:
    # 获取验证码的 url 的前缀, 默认: /code
    get-validate-code-url-prefix: /code
    # 图片验证码
    image:
      # 设置需要图片验证码认证的 uri(必须是非 GET 请求)，多个 uri 用 “-” 或 ","号分开支持通配符，如：/hello,/user/*；默认为 /authentication/form
      auth-urls:
        - /authentication/form
        - /authentication/social
      # 验证码长度
      length: 4
      height: 60
      width: 270
      expire: 180
      request-para-height-name: height
      request-para-width-name: width
      request-param-image-code-name: imageCode
    # 短信验证码
    sms:
      # 设置需要短信验证码认证的 uri(必须是非 GET 请求)，多个 uri 用 “，”号分开支持通配符，如：/hello,/user/*；默认为 /authentication/form
      auth-urls:
        - /authentication/mobile
      length: 6
      expire: 120
      request-param-mobile-name: mobile
      request-param-sms-code-name: smsCode

    # 滑块验证码
    slider:
      # 设置需要验证码认证的 uri(必须是非 GET 请求)，多个 uri 用 “-” 或 ","号分开支持通配符，如：/hello,/user/*；默认为 空
      auth-urls:
#        - /authentication/form
      # 设置滑块验证码校验证的 uri, 默认: /slider/check, 默认: /slider/check
      slider-check-url: /slider/check
      # 提交验证码请求时，请求中带的验证码变量名，默认 sliderCode.
      # 与 tokenRequestParamName, xRequestParamName, yRequestParamName 互斥关系;
      # 当使用此参数时, 把另外三个参数(kv键值对形式, 键值对之间用逗号风隔) 组装到此参数.
      # 注意: 默认传递参数是用另外的三个参数实现验证码校验, 如要使用此参数, 请重新实现 ValidateCodeProcessor#validate(ServletWebRequest)
      request-param-name: sliderCode
      # request token param name, 默认: sliderToken. 与 requestParamName 互斥关系.
      token-request-param-name: sliderToken
      # request X param name, 默认: x. 与 requestParamName 互斥关系.
      x-request-param-name: x
      # request Y param name, 默认: y. 与 requestParamName 互斥关系.
      y-request-param-name: y
      # 抠图凸起圆心, 默认: 5
      circle-r: 5
      # 滑块图宽度, 默认: 50
      cut-width: 50
      # 滑块图高度, 默认: 50
      cut-height: 50
      # 抠图内部矩形填充大小, 默认: 8
      rectangle-padding:
      # 抠图的边框宽度, 默认:
      slider-img-out-padding:
      # 滑块验证码默认过期时间, 180 秒
      expire: 180
      # 原始图片目录，默认 static/image/validate/original
      original-image-directory: static/image/validate/original
      # 根据原始图片生成的滑块图片目录，用于自定义缓存滑块图片的存储目录, 默认 static/image/validate/template
      template-image-directory: static/image/validate/template


  # 手机登录配置
  mobile:
    login:
      # 手机验证码登录开启后 必须配置 ums.codes.sms.auth-urls=/authentication/mobile
      sms-code-login-is-open: true
      # 手机验证码登录请求处理url, 默认 /authentication/mobile
      login-processing-url-mobile: /authentication/mobile

  # 第三方登录配置: social
  social:
    # 第三方登录用户数据库表的字段 key 与 secret 加密专用密码
    text-encryptor-password: 7ca5d913a17b4942942d16a974e3fecc
    # 第三方登录用户数据库表的字段 key 与 secret 加密专用 salt
    text-encryptor-salt: cd538b1b077542aca5f86942b6507fe2

    # ConnectionSignUp 非常有用的扩展接口, 调用时机：在第三方服务商回调 redirectUrl 接口时，
    # 在确认数据库用户表(ums.social.table-name)中没有用户记录调用且 autoSignIn 为 true 时，调用此接口。
    # 第三方登录时是否自动注册：当为 true 且实现 ConnectionSignUp 接口，则开启自动注册，此时 signUpUrl 失效，否则不会开始自动注册，默认为 true
    auto-sign-in: false

    # 当关闭自动注册后, 注册功能页面有验证码时, 则额外需要设置验证码校验功能.
    # social 第三方登录注册功能是否开启，默认为 false
    social-sign-up-is-open: true

    # ============== 以下配置依赖 social-sign-up-is-open=true 时才有效 ==============

    # autoSignIn=true 且实现 BaseConnectionSignUp 接口则自动登录，而且 signUpUrl 会失效
    # 第三方登录用户授权成功跳转页面，默认为 /signUp.html， 用户必需设置
    sign-up-url: /signUp
    # 第三方登录用户从 signUpUrl 提交的用户信息表单，默认由 /authentication/social 进行处理，由 Social 处理，不需要用户实现
    social-user-register-url: /authentication/social

    # ============== 以上配置依赖 social-sign-up-is-open=true 时才有效 ==============

    # 第三方登录页面， 默认为 /signIn.html
    sign-in-url: /signIn.html
    # 第三方登录用户授权失败跳转页面， 默认为 /signIn.html
    failure-url: /signIn.html
    # 第三方登录用户注册时: 用户唯一 ID 字段名称， 默认为 userId
    user-id-param-name: userId
    # 第三方登录用户注册时 密码 字段名称， 默认为 password
    password-param-name: password
    # 第三方服务商 providerId 字段名称， 默认为 providerId
    provider-id-param-name: providerId
    # 第三方登录用户在服务商用户唯一ID providerUserId 字段名称， 默认为 providerUserId
    provider-user-id-param-name: providerUserId
    # 第三方登录用户头像 avatarUrl 字段名称， 默认为 avatarUrl
    avatar-url-param-name: avatarUrl
    ####### 第三方登录绑定相关
    # 第三方登录绑定页面， 默认为 /banding.html
    banding-url: /banding
    # 用户绑定第三方账号的 List 的参数名称, 默认: connections
    banding-provider-connection-list-name: connections
    # 查看所有第三方账号绑定状态 url: /connect
    # 查看指定第三方账号绑定状态 url: /connect/providerId(qq/gitee/weixin/weibo)
    # 用户绑定第三方账号后返回状态信息的视图前缀, 默认: connect/ , 在自定义 AbstractView 时有用
    # 对 AbstractView 子类定义 bean 时, beanName 的前缀必须与此属性值一样, 具体可以看 BandingConnectController#connectView(..) 几个方法
    view-path: connect/

    # 第三方授权登录用户信息表
    table-name: social_UserConnection
    user-id-column-name: userId
    provider-id-column-name: providerId
    provider-user-id-column-name: providerUserId
    rank-column-name: '`rank`'
    display-name-column-name: displayName
    profile-url-column-name: profileUrl
    image-url-column-name: imageUrl
    access-token-column-name: accessToken
    secret-column-name: secret
    refresh-token-column-name: refreshToken
    expire-time-column-name: expireTime
    # 第三方登录用户数据库用户表创建语句。 修改第三方登录用户数据库用户表创建语句时，
    # 要注意：修改字段名称可以直接修改上面的字段名称即可，不用修改建表语句; 不可以减少字段，但可以另外增加字段。
    # 主键必须是 userIdColumnName，唯一索引必须是（userIdColumnName、  providerIdColumnName、  rankColumnName）。
    # sql 语句中的 %s 必须写上，且 %s 的顺序必须与后面的字段名称所对应的含义对应 : tableName、  userIdColumnName、 providerIdColumnName、
    # providerUserIdColumnName、  rankColumnName、  displayNameColumnName、  profileUrlColumnName、  imageUrlColumnName、  accessTokenColumnName、  secretColumnName、  refreshTokenColumnName、  expireTimeColumnName、  userIdColumnName、  providerIdColumnName、  providerUserIdColumnName、  userIdColumnName、  providerIdColumnName、  rankColumnName
    creat-user-connection-table-sql: create table %s (%s varchar(255) not null, %s varchar(255) not null, %s varchar(255), %s int not null, %s varchar(255), %s varchar(512), %s varchar(512), %s varchar(512) not null, %s varchar(512), %s varchar(512), %s bigint, primary key (%s, %s, %s), unique index UserConnectionRank(%s, %s, %s));
    # 用户需要对第三方登录的用户表与 curd 的 sql 语句结构进行更改时（curd 语句通过配置文件修改暂时未实现），
    # 请实现 UsersConnectionRepositoryFactory，可以参考 OAuth2UsersConnectionRepositoryFactory、OAuthJdbcUsersConnectionRepository、JdbcConnectionRepository

    # =================== 统一回调路由地址 =======================
    # 第三方登录回调处理 url ，也是 RedirectUrl 的前缀，默认为 /auth/callback
    # 如果更改此 url，更改后的必须要实现 SocialController#authCallbackRouter(HttpServletRequest) 的功能
    callback-url: /auth/callback
    # redirectUrl 直接由 domain/servletContextPath/callbackUrl/providerId(ums.social.[qq/wechat/gitee/weibo])组成
    # 第三方登录回调的域名
    domain: http://www.dcenter.top

    # =================== 第三方服务商的信息 =======================
    # 从第三方服务商获取的信息
    qq:
      # 用户设置 true 时，{providerId}第三方登录自动开启，默认为 false
      enable: false
      app-id:
      app-secret:
      # redirectUrl 默认直接由 domain/servletContextPath/callbackUrl/providerId(ums.social.[qq/wechat/gitee/weibo])组成
      # redirect-url: http://www.dcenter.top/demo/auth/callback/qq
    gitee:
      # 用户设置 true 时，{providerId}第三方登录自动开启，默认为 false
      enable: true
      app-id:
      app-secret:
    weixin:
      # 用户设置 true 时，{providerId}第三方登录自动开启，默认为 false
      enable: false
      app-id:
      app-secret:
    weibo:
      # 用户设置 true 时，{providerId}第三方登录自动开启，默认为 false
      enable: false
      app-id:
      app-secret:


---
spring:
  profiles: dev
  # mysql
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://127.0.0.1:3306/ums?useSSL=false&useUnicode=true&characterEncoding=UTF-8&zeroDateTimeBehavior=convertToNull&serverTimezone=Asia/Shanghai
    username: root
    password: 123456

  # redis
  redis:
    host: 192.168.88.88
    port: 6379
    password:
    database: 0
    # 连接超时的时间
    timeout: 10000
    # redis-lettuce-pool
    lettuce:
      # 会影响应用关闭是时间, dev 模式设置为 0
      shutdown-timeout: PT0S
      pool:
        max-active: 8
        max-wait: PT10S
        max-idle: 8
        min-idle: 1
  mvc:
    throw-exception-if-no-handler-found: true
  thymeleaf:
    cache: false
debug: true

server:
  port: 9090
  servlet:
    context-path: /demo

security:
  # 第三方登录配置: social
  social:
    # 从第三方服务商获取的信息
    qq:
      # 用户设置 true 时，{providerId}第三方登录自动开启，默认为 false
      enable: false
      app-id:
      app-secret:
      # redirectUrl 默认直接由 domain/servletContextPath/callbackUrl/providerId(ums.social.[qq/wechat/gitee/weibo])组成
      # redirect-url: http://www.dcenter.top/demo/auth/callback/qq
    gitee:
      # 用户设置 true 时，{providerId}第三方登录自动开启，默认为 false
      enable: true
      app-id:
      app-secret:
    weixin:
      # 用户设置 true 时，{providerId}第三方登录自动开启，默认为 false
      enable: false
      app-id:
      app-secret:
    weibo:
      # 用户设置 true 时，{providerId}第三方登录自动开启，默认为 false
      enable: false
      app-id:
      app-secret:

ums:
  # social_UserConnection 缓存为 Redis
  redis:
    # 是否开启缓存, 默认 false
    open: true
    # 是否使用 spring IOC 容器中的 RedisConnectionFactory， 默认： false
    # 如果使用 spring IOC 容器中的 RedisConnectionFactory，则要注意 cache.database-index 要与 spring.redis.database 一样。
    use-ioc-redis-connection-factory: true
    cache:
      database-index: 1
      default-expire-time: PT200S
      entry-ttl: PT180S
      cache-names:
        - cacheName

swagger:
  show: true
