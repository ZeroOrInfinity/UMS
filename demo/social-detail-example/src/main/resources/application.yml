server:
  port: 9090

spring:
  profiles:
    active: dev
  # mysql
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://127.0.0.1:3306/ums?useSSL=false&useUnicode=true&characterEncoding=UTF-8&zeroDateTimeBehavior=convertToNull&serverTimezone=Asia/Shanghai
    username: root
    password: 123456
  # thymeleaf
  thymeleaf:
    encoding: utf-8
    prefix: classpath:/templates/
    suffix: .htm
    servlet:
      content-type: text/html;charset=UTF-8
  # jackson
  jackson:
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: GMT+8

  # =============== start: 第三方登录时用的数据库表 social_UserConnection 添加 redis cache ===============
  # 设置缓存为 Redis
  cache:
    type: redis
  # redis
  redis:
    host: 192.168.88.88
    port: 6379
    password:
    database: 0
    # 连接超时的时间
    timeout: 10000
    # redis-lettuce-pool
    lettuce:
      # 会延长关闭应用的时间, 测试时自行调整
      shutdown-timeout: PT500S
      pool:
        max-active: 8
        max-wait: PT10S
        max-idle: 8
        min-idle: 1

# redisCacheManager 设置
redis:
  # 是否开启缓存, 默认 false
  open: true
  # 是否使用 spring IOC 容器中的 RedisConnectionFactory， 默认： false
  # 如果使用 spring IOC 容器中的 RedisConnectionFactory，则要注意 cache.database-index 要与 spring.redis.database 一样。
  use-ioc-redis-connection-factory: true
  cache:
    database-index: 1
    default-expire-time: PT200S
    entry-ttl: PT180S
    cache-names:
      - cacheName
  # =============== end: 第三方登录时用的数据库表 social_UserConnection 添加 redis cache ===============


  # session 简单配置
  session:
    # session 存储模式设置, 要导入相应的 spring-session 类的依赖, 默认为 none, 分布式服务应用把 session 放入 redis 等中间件
    store-type: none
    # session 过期时间
    timeout: PT300s

security:
  client:
    # 登录页
    login-page: /login
    # 登录失败页
    failure-url: /login
    # 设置登录后返回格式(REDIRECT 与 JSON): 默认 JSON
    login-process-type: redirect
    # 设置处理登录表单的 uri，不需要用户实现此 uri，由 Spring security 自动实现， 默认为 /authentication/form
    login-processing-url: /authentication/form
    # 登录成功页
    success-url: /
    # 设置登出 url, 默认为 /logout
    logout-url: /logout
    # 设置登出后跳转的 url, 默认为 /login
    logout-success-url: /login
    # 设置登录时用户名的 request 参数名称, 默认为 username
    usernameParameter: username
    # 设置登录时用户密码的 request 参数名称, 默认为 password
    passwordParameter: password
    # 登录后是否利用 Referer 进行跳转, 默认为: true
    useReferer: true
    # 设置由客户端决定认证成功要跳转的 url 的 request 参数名称, 默认为 redirectTargetUrl
    targetUrlParameter: redirectTargetUrl
    # 不需要认证的静态资源 urls, 例如: /resources/**, /static/**
    ignoring-urls:
      - /static/**
    # 不需要认证的 uri, 默认为 空 Set.
    permit-urls:
      - /**/*.html

    # =============== login routing 功能: 解决跳转登录成功后不能跳转原始请求的问题 ===============

    # 是否开启根据不同的uri跳转到相对应的登录页, 默认为: false, 当为 true 时还需要配置 loginUnAuthenticationRoutingUrl 和 authRedirectSuffixCondition
    open-authentication-redirect: true
    # 当请求需要身份认证时，默认跳转的url 会根据 authJumpSuffixCondition 条件判断的认证处理类型的 url，默认实现 /authentication/require,
    # 当 openAuthenticationRedirect = true 时生效.
    login-un-authentication-routing-url: /authentication/require
    # 设置 uri 相对应的跳转登录页, 例如：key=/**: value=/login.html, 用等号隔开key与value, 如: /**=/login.html, 默认为空.
    # 当 openAuthenticationRedirect = true 时生效.
    # 支持通配符, 匹配规则： /user/aa/bb/cc.html 匹配 pattern：/us?r/**/*.html, /user/**, /user/*/bb/c?.html, /user/**/*.*.
    # 规则具体看 AntPathMatcher.match(pattern, path)
    auth-redirect-suffix-condition:
      - '/hello=/login2'
      - '/user/**=/login'
      - '/order/**=/login'
      - '/file/**=/login'
      - '/social/**=/signIn.html'


  # =============== 第三方登录配置: social ===============
  social:
    # 第三方登录用户数据库表的字段 key 与 secret 加密专用密码
    text-encryptor-password: 7ca5d913a17b4942942d16a974e3fecc
    # 第三方登录用户数据库表的字段 key 与 secret 加密专用 salt
    text-encryptor-salt: cd538b1b077542aca5f86942b6507fe2
    # 第三方登录页面， 默认为 /signIn.html
    sign-in-url: /signIn
    # 第三方登录用户授权失败跳转页面， 默认为 /signIn.html
    failure-url: /signIn
    # 第三方登录用户注册时: 用户唯一 ID 字段名称， 默认为 userId
    user-id-param-name: userId
    # 第三方登录用户注册时 密码 字段名称， 默认为 password
    password-param-name: password
    # 第三方服务商 providerId 字段名称， 默认为 providerId
    provider-id-param-name: providerId
    # 第三方登录用户在服务商用户唯一ID providerUserId 字段名称， 默认为 providerUserId
    provider-user-id-param-name: providerUserId
    # 第三方登录用户头像 avatarUrl 字段名称， 默认为 avatarUrl
    avatar-url-param-name: avatarUrl

    # 从第三方服务商获取的信息
    qq:
      # 用户设置 true 时，{providerId}第三方登录自动开启，默认为 false
      enable: false
      app-id:
      app-secret:
      # redirectUrl 默认直接由 domain/servletContextPath/callbackUrl/providerId(security.social.[qq/wechat/gitee/weibo])组成
      # redirect-url: http://www.dcenter.top/demo/auth/callback/qq
    gitee:
      # 用户设置 true 时，{providerId}第三方登录自动开启，默认为 false
      enable: true
      app-id:
      app-secret:
    weixin:
      # 用户设置 true 时，{providerId}第三方登录自动开启，默认为 false
      enable: false
      app-id:
      app-secret:
    weibo:
      # 用户设置 true 时，{providerId}第三方登录自动开启，默认为 false
      enable: false
      app-id:
      app-secret:


    # ConnectionSignUp 非常有用的扩展接口, 调用时机：在第三方服务商回调 redirectUrl 接口时，
    # 在确认数据库用户表(security.social.table-name)中没有用户记录调用且 autoSignIn 为 true 时，调用此接口。
    # 第三方登录时是否自动注册：当为 true 且实现 ConnectionSignUp 接口，则开启自动注册，此时 signUpUrl 失效，否则不会开始自动注册，默认为 true
    auto-sign-in: false

    # ============== 第三方登录注册功能 ==============
    # 当关闭自动注册后, 注册功能页面有验证码时, 则额外需要设置验证码校验功能.
    # social 第三方登录注册功能是否开启，默认为 false
    social-sign-up-is-open: true

    # ------------------ 以下配置依赖 social-sign-up-is-open=true 时才有效 ------------------

    # autoSignIn=true 且实现 BaseConnectionSignUp 接口则自动登录，而且 signUpUrl 会失效
    # 第三方登录用户授权成功跳转页面，默认为 /signUp.html， 用户必需设置
    sign-up-url: /signUp
    # 第三方登录用户从 signUpUrl 提交的用户信息表单，默认由 /authentication/social 进行处理，由 Social 处理，不需要用户实现
    social-user-register-url: /authentication/social

    # ------------------ 以上配置依赖 social-sign-up-is-open=true 时才有效 ------------------

    # ============== 统一回调地址路由配置 ==============
    # 第三方登录回调处理 url ，也是 RedirectUrl 的前缀，默认为 /auth/callback
    # 如果更改此 url，更改后的必须要实现 SocialController#authCallbackRouter(HttpServletRequest) 的功能
    callback-url: /auth/callback
    # redirectUrl 直接由 domain/servletContextPath/callbackUrl/providerId(security.social.[qq/wechat/gitee/weibo])组成
    # 第三方登录回调的域名
    domain: http://www.dcenter.top

    # ============== 第三方登录绑定相关 ==============
    # 第三方登录绑定页面， 默认为 /banding.html
    banding-url: /banding
    # 用户绑定第三方账号的 List 的参数名称, 默认: connections
    banding-provider-connection-list-name: connections
      # 查看所有第三方账号绑定状态 url: /connect
      # 查看指定第三方账号绑定状态 url: /connect/providerId(qq/gitee/weixin/weibo)
    # 用户绑定第三方账号后返回状态信息的视图前缀, 默认: connect/ , 在自定义 AbstractView 时有用
    # 对 AbstractView 子类定义 bean 时, beanName 的前缀必须与此属性值一样, 具体可以看 BandingConnectController#connectView(..) 几个方法
    view-path: connect/


    # ============== 第三方授权登录用户信息表自定义设置 ==============
    # 第三方授权登录用户信息表
    table-name: social_UserConnection
    user-id-column-name: userId
    provider-id-column-name: providerId
    provider-user-id-column-name: providerUserId
    rank-column-name: '`rank`'
    display-name-column-name: displayName
    profile-url-column-name: profileUrl
    image-url-column-name: imageUrl
    access-token-column-name: accessToken
    secret-column-name: secret
    refresh-token-column-name: refreshToken
    expire-time-column-name: expireTime
    # 第三方登录用户数据库用户表创建语句。 修改第三方登录用户数据库用户表创建语句时，
    # 要注意：修改字段名称可以直接修改上面的字段名称即可，不用修改建表语句; 不可以减少字段，但可以另外增加字段。
    # 主键必须是 userIdColumnName，唯一索引必须是（userIdColumnName、  providerIdColumnName、  rankColumnName）。
    # sql 语句中的 %s 必须写上，且 %s 的顺序必须与后面的字段名称所对应的含义对应 : tableName、  userIdColumnName、 providerIdColumnName、
    # providerUserIdColumnName、  rankColumnName、  displayNameColumnName、  profileUrlColumnName、  imageUrlColumnName、  accessTokenColumnName、  secretColumnName、  refreshTokenColumnName、  expireTimeColumnName、  userIdColumnName、  providerIdColumnName、  providerUserIdColumnName、  userIdColumnName、  providerIdColumnName、  rankColumnName
    creat-user-connection-table-sql: create table %s (%s varchar(255) not null, %s varchar(255) not null, %s varchar(255), %s int not null, %s varchar(255), %s varchar(512), %s varchar(512), %s varchar(512) not null, %s varchar(512), %s varchar(512), %s bigint, primary key (%s, %s, %s), unique index UserConnectionRank(%s, %s, %s));
    # 用户需要对第三方登录的用户表与 curd 的 sql 语句结构进行更改时（curd 语句通过配置文件修改暂时未实现），
    # 请实现 UsersConnectionRepositoryFactory，可以参考 OAuth2UsersConnectionRepositoryFactory、OAuthJdbcUsersConnectionRepository、JdbcConnectionRepository


  # 验证码配置
  codes:
    # 图片验证码
    image:
      # 设置需要图片验证码认证的 uri(必须是非 GET 请求)，多个 uri 用 “-” 或 ","号分开支持通配符，如：/hello,/user/*；默认为 /authentication/form
      auth-urls:
        - /authentication/form
        - /authentication/social


---
spring:
  profiles: dev
  thymeleaf:
    cache: false
  mvc:
    throw-exception-if-no-handler-found: true
  redis:
    # redis-lettuce-pool
    lettuce:
      # 会延长关闭应用的时间, 测试时自行调整
      shutdown-timeout: PT0S

debug: true
server:
  servlet:
    context-path: /demo
