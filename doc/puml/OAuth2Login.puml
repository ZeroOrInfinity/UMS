@startuml

client --> client: OAuth2登录流程开始
opt 获取授权链接
client -> SocialAuthenticationFilter: 1 /auth/callback/qq

SocialAuthenticationFilter --> SocialAuthenticationFilter: 1.1 doFilter()
activate SocialAuthenticationFilter
SocialAuthenticationFilter --> SocialAuthenticationFilter: 1.1.1 attemptAuthService()
activate SocialAuthenticationFilter
participant SocialOAuth2AuthenticationService #ff9800
SocialAuthenticationFilter -> SocialOAuth2AuthenticationService: 1.1.1.1\n getAuthToken()
activate SocialOAuth2AuthenticationService
SocialOAuth2AuthenticationService --> SocialOAuth2AuthenticationService: 1.1.1.1\n request.getParameter\n("code") 等于空
SocialOAuth2AuthenticationService --> SocialOAuth2AuthenticationService: 1.1.1.2\n params =\n new OAuth2Parameters()
SocialOAuth2AuthenticationService --> SocialOAuth2AuthenticationService: 1.1.1.3\n params.setRedirectUri \n(buildReturnToUrl (request))
activate SocialOAuth2AuthenticationService
SocialOAuth2AuthenticationService --> SocialOAuth2AuthenticationService: 1.1.1.3.1 buildReturnToUrl(),\n <back:cadetblue>重新实现以便支持统一的回调地址</back>\n<back:cadetblue>路由到多个回调地址</back>
deactivate SocialOAuth2AuthenticationService
SocialOAuth2AuthenticationService --> SocialOAuth2AuthenticationService: 1.1.1.4\n params.add("state",\n generateState\n (connectionFactory,request))
SocialOAuth2AuthenticationService --> SocialOAuth2AuthenticationService: 1.1.1.5\n addCustomParameters(params)
SocialOAuth2AuthenticationService --> SocialOAuth2AuthenticationService: 1.1.1.6\n getConnectionFactory()\n.getOAuthOperations()\n.buildAuthenticateUrl(params)
SocialOAuth2AuthenticationService --> SocialAuthenticationFilter: 1.1.2 \nSocialAuthenticationRedirectException\n(RedirectUrl)
deactivate SocialOAuth2AuthenticationService
deactivate SocialAuthenticationFilter
deactivate SocialAuthenticationFilter
SocialAuthenticationFilter --> client: 1.2 跳转第三方进行授权
end
alt 第三方授权登录流程，未注册用户授权成功，转入注册页面
client -> SocialController: 2<back:cadetblue> 第三方回调统一的回调地址：/auth/callback</back>
activate SocialController
SocialController -> SocialController: 2.0 <back:cadetblue>对state进行解密</back>\n<back:cadetblue>并解析出真实回调地址</back>\n<back :cadetblue>再进行跳转/auth/callback/qq </back>
SocialController -> SocialAuthenticationFilter: 2.1 doFilter()
deactivate SocialController
activate SocialAuthenticationFilter
SocialAuthenticationFilter --> SocialAuthenticationFilter: 2.1.1 attemptAuthentication()
activate SocialAuthenticationFilter
SocialAuthenticationFilter --> SocialAuthenticationFilter: 2.1.2 attemptAuthService()
SocialAuthenticationFilter -> SocialOAuth2AuthenticationService: 2.1.3 getAuthToken()
activate SocialAuthenticationFilter
activate SocialOAuth2AuthenticationService
SocialOAuth2AuthenticationService --> SocialOAuth2AuthenticationService: 2.1.3.1\n request.getParameter("code") 不等于空
SocialOAuth2AuthenticationService --> SocialOAuth2AuthenticationService: 2.1.3.2\n returnToUrl =\n buildReturnToUrl(request)
SocialOAuth2AuthenticationService --> SocialOAuth2AuthenticationService: 2.1.3.3\n accessGrant=exchangeForAccess \n(code, returnToUrl, null)
SocialOAuth2AuthenticationService --> SocialOAuth2AuthenticationService: 2.1.3.4 token =\n createConnection(accessGrant)\n从第三方服务商获取用户信息
SocialOAuth2AuthenticationService --> SocialAuthenticationFilter: 2.1.3.5 返回token
deactivate SocialOAuth2AuthenticationService
deactivate SocialAuthenticationFilter

SocialAuthenticationFilter --> SocialAuthenticationFilter: 2.1.4 getAuthentication() =\n auth 在缓存中检查是否有认证通过
SocialAuthenticationFilter --> SocialAuthenticationFilter: 2.1.4.0  auth=null &&\n !auth.isAuthenticated() 没有认证
group 本应用未登录用户
activate SocialAuthenticationFilter
SocialAuthenticationFilter --> SocialAuthenticationFilter: 2.1.4.1 doAuthentication\n(authService,request,token)
activate SocialAuthenticationFilter

SocialAuthenticationFilter -> ProviderManager: 2.1.4.1.1\n authenticate(token)
ProviderManager -> SocialAuthenticationProvider: 2.1.4.1.1\n authenticate(token)
activate SocialAuthenticationProvider
SocialAuthenticationProvider --> SocialAuthenticationProvider: 2.1.4.1.1.1 get\n connection token providerId
SocialAuthenticationProvider --> SocialAuthenticationProvider: 2.1.4.1.1.2 userId =\n toUserId(connection)
SocialAuthenticationProvider -> OAuthJdbcUsersConnectionRepository: 2.1.4.1.1.2.1\n findUserIdsWithConnection\n(connection)
activate SocialAuthenticationProvider
activate OAuthJdbcUsersConnectionRepository
opt 自动注册
OAuthJdbcUsersConnectionRepository --> OAuthJdbcUsersConnectionRepository: 2.1.4.1.1.2.1.1\n userIds.size()==0 &&\n connectionSignUp!=null成立\n则《自动注册>用户信息
participant BaseConnectionSignUp #ff9800
OAuthJdbcUsersConnectionRepository -> BaseConnectionSignUp: 2.1.4.1.1.2.1.1.1\n execute(c) \n根据提交的信息查询并\n确认是否有newUserId
activate BaseConnectionSignUp
BaseConnectionSignUp --> OAuthJdbcUsersConnectionRepository: 2.1.4.1.1.2.1.1.1.1\n 当newUserId有值则\nuserIds=addConnection(c)\n添加用户信息
BaseConnectionSignUp --> OAuthJdbcUsersConnectionRepository: 2.1.4.1.1.2.1.1.1.1\n 当newUserId有值则\nuserIds=null
deactivate BaseConnectionSignUp
end
OAuthJdbcUsersConnectionRepository --> SocialAuthenticationProvider: 2.1.4.1.1.3\n 返回的userIds，\n为null表示用户未注册或\n没有开启自动注册功能，\n否则反之
deactivate OAuthJdbcUsersConnectionRepository
deactivate SocialAuthenticationProvider
SocialAuthenticationProvider --> SocialAuthenticationProvider: 2.1.4.1.1.3.0\n 根据 userIds 返回 userId
opt 第三方登录用户表不存在此用户
SocialAuthenticationProvider --> SocialAuthenticationProvider: 2.1.4.1.1.3.1\n 如果userId=null则\n抛出BadCredentialsException \n("Unknown access token")
SocialAuthenticationProvider --> ProviderManager: 2.1.4.1.6\n BadCredentialsException\n("Unknown access token")
end
ProviderManager --> SocialAuthenticationFilter: 2.1.5\n SocialAuthenticationRedirectException\n(buildSignupUrl(request))
deactivate SocialAuthenticationFilter
SocialAuthenticationFilter --> client: 2.2 跳转到 /signUp.html \n 后续流程看 OAuth2SignUp.puml
else 第三方授权登录流程，已注册用户或自动注册用户授权成功，返回页面
opt 第三方登录用户表存在且业务用户表也存在此用户
SocialAuthenticationProvider --> SocialAuthenticationProvider: 2.1.4.1.1.3.1\n 如果userId有值
SocialAuthenticationProvider -> SocialOAuth2AuthenticationService: 2.1.4.1.1.3.1.2.1\n userDetails=\nloadUserByUserId(userId)\n 查询用户信息
activate SocialOAuth2AuthenticationService
SocialOAuth2AuthenticationService --> SocialAuthenticationProvider: 2.1.4.1.1.3.2\n userDetails != null
deactivate SocialOAuth2AuthenticationService
SocialAuthenticationProvider --> ProviderManager: 2.1.4.1.1.4\n 返回SocialAuthenticationToken
end
deactivate SocialAuthenticationProvider
ProviderManager --> SocialAuthenticationFilter: 2.1.4.1.2\n 返回SocialAuthenticationToken
SocialAuthenticationFilter --> SocialAuthenticationFilter: 2.1.4.1.3\n updateConnections\n(authService, token, success)\n更新用户信息
SocialAuthenticationFilter -> OAuthJdbcUsersConnectionRepository: 2.1.4.1.3.2\n updateConnection\n(connection)\n更新用户信息
activate OAuthJdbcUsersConnectionRepository
OAuthJdbcUsersConnectionRepository --> OAuthJdbcUsersConnectionRepository: 2.1.4.1.3.2.1\n this .updateConnections==true\n才更新
OAuthJdbcUsersConnectionRepository --> SocialAuthenticationFilter: 2.1.4.1.3.3 返回
deactivate OAuthJdbcUsersConnectionRepository
SocialAuthenticationFilter --> client: 2.3 第三方授权登录成功，\n返回 RedirectUrl 或 DefaultSuccessUrl
else 第三方授权登录流程，已注册用户或自动注册用户授权成功，但业务用户表无记录，返回失败信息
SocialOAuth2AuthenticationService --> SocialAuthenticationProvider: 2.1.4.1.1.3.2\n userDetails == null
activate SocialOAuth2AuthenticationService
SocialAuthenticationProvider --> ProviderManager: 2.1.4.1.1.5\n UsernameNotFoundException\n("Unknown connected account id")
ProviderManager --> SocialOAuth2AuthenticationService: 2.1.4.1.1.3.3\n UsernameNotFoundException\n("Unknown connected account id")
SocialOAuth2AuthenticationService --> SocialAuthenticationFilter: 2.1.4.1.3\n UsernameNotFoundException\n("Unknown connected account id")
deactivate SocialOAuth2AuthenticationService
SocialAuthenticationFilter -> SocialAuthenticationFailureHandler: 2.1.5\n UsernameNotFoundException\n("Unknown connected account id")
activate SocialAuthenticationFailureHandler
end
deactivate SocialAuthenticationFilter
SocialAuthenticationFailureHandler --> client: 2.3 根据LoginType类型\n返回 JSON 或 HTML 格式的错误信息
deactivate SocialAuthenticationFailureHandler
else 第三方授权登录流程，通过其他方式已登录，再进行第三方登录授权成功，进行用户绑定时失败, 具体看 OAuth2Banding.puml
group 本应用已登录用户

SocialOAuth2AuthenticationService --> SocialAuthenticationFilter: 2.1.4.1  auth.isAuthenticated()已经认证通过
activate SocialAuthenticationFilter
SocialAuthenticationFilter --> SocialAuthenticationFilter: 2.1.4.2 \n addConnection\n(authService, request, token, auth)
activate SocialAuthenticationFilter
SocialAuthenticationFilter --> SocialAuthenticationFilter: 2.1.4.2.1 \n userId = \n userIdSource.getUserId()
SocialAuthenticationFilter --> SocialAuthenticationFilter: 2.1.4.2.2 \n principal = \n token.getPrincipal()
SocialAuthenticationFilter --> SocialAuthenticationFilter: 2.1.4.2.3 \n addConnection\n(authService, userId, principal)

SocialAuthenticationFilter -> OAuthJdbcUsersConnectionRepository: 2.1.4.2.3.1\n findUserIdsConnectedTo\n(providerId, providerUserIds)
activate SocialAuthenticationFilter
activate OAuthJdbcUsersConnectionRepository
OAuthJdbcUsersConnectionRepository --> SocialAuthenticationFilter: 2.1.4.2.3.2 返回 userIds
deactivate SocialAuthenticationFilter
deactivate OAuthJdbcUsersConnectionRepository
opt 如果用户已绑定
SocialAuthenticationFilter --> SocialAuthenticationFilter: 2.1.4.2.3.3\n userIds.contains(userId)\n 如果包含
SocialAuthenticationFilter --> SocialAuthenticationFilter: 2.1.4.2.4\n 返回 null 2.1.4.2.3
SocialAuthenticationFilter --> SocialAuthenticationFilter: 2.1.4.3 \n返回 null 2.1.4.2
end
SocialAuthenticationFilter --> client: 2.4 根据LoginType类型\n返回 JSON 或 HTML 格式的错误信息
else 第三方授权登录流程，通过其他方式已登录，再进行第三方登录授权成功，进行用户绑定时成功, 具体看 OAuth2Banding.puml
opt 如果用户没有绑定
SocialAuthenticationFilter --> SocialAuthenticationFilter: 2.1.4.2.3.3\n userIds.contains(userId)\n 如果不包含
SocialAuthenticationFilter -> JdbcUsersConnectionRepository: 2.1.4.2.3.1\n addConnection(connection)
activate JdbcUsersConnectionRepository
activate SocialAuthenticationFilter
JdbcUsersConnectionRepository --> SocialAuthenticationFilter: 2.1.4.2.4\n 返回 2.1.4.2.3 connection
deactivate SocialAuthenticationFilter
deactivate JdbcUsersConnectionRepository
SocialAuthenticationFilter --> SocialAuthenticationFilter: 2.1.4.3\n 返回 2.1.4.2 connection
SocialAuthenticationFilter -> SocialOAuth2AuthenticationService: 2.1.4.3.1 \nredirectUrl =\n authService.\ngetConnectionAddedRedirectUrl\n(request, connection)
activate SocialOAuth2AuthenticationService
activate SocialAuthenticationFilter
SocialOAuth2AuthenticationService --> SocialAuthenticationFilter: 2.1.4.4 \n返回 redirectUrl \n如果为 null，\n使用默认的\n connectionAddedRedirectUrl
deactivate SocialOAuth2AuthenticationService
deactivate SocialAuthenticationFilter
deactivate SocialAuthenticationFilter
SocialAuthenticationFilter --> SocialAuthenticationFilter: 2.5 返回 2.1\n SocialAuthenticationRedirectException\n(redirectUrl)
end
deactivate SocialAuthenticationFilter
SocialAuthenticationFilter --> client: 2.6 返回 2.1 \n跳转到 redirectUrl
deactivate SocialAuthenticationFilter
end
end

deactivate SocialAuthenticationFilter
client --> client: OAuth2登录流程结束

== API ==

note over SocialOAuth2AuthenticationService: 对 OAuth2AuthenticationService 的扩展. 通过覆写 buildReturnToUrl(request)方法\n\
使 social 支持通过统一的回调地址路由到多个回调地址，如要修改此方法逻辑，\n请在实现 BaseOAuth2ConnectionFactory时\n\
覆写buildReturnToUrl(HttpServletRequest,Set)功能：修改RedirectUrl到统一的回调地址\n\
覆写generateState(authCallbackPath)功能：加密url到state\n\
同时覆写 RedirectUrlHelper.decodeRedirectUrl(state)功能：从state解密出正式回调地址
note over BaseConnectionSignUp: 第三方授权登录时自动注册处理器接口。\n\
 接口方法execute(Connection)功能：第三方登录自动注册时\n 从第三方的 connection\
 中获取用户唯一标识。\n 当实现 BaseConnectionSignUp 接口且\n ums.social.autoSignIn=true \n则第三方授权登录时自动注册. 注意：要替换此类，实现\n\
 BaseConnectionSignUp 接口且注册 IOC 容器
@enduml