@startuml

client --> client: session 流程开始
client -> SessionManagementFilter: 1. /** 访问任何 url
activate SessionManagementFilter
SessionManagementFilter --> SessionManagementFilter: 2 request.getAttribute\n(FILTER_APPLIED)\n检测session是否已处理
alt 2 session已处理
SessionManagementFilter -> OtherFilter: 2.1 chain.doFilter\n(request, response)
OtherFilter --> OtherFilter: 后面步骤略
participant BaseAuthenticationFailureHandler #ff9800
else 2 session未处理
SessionManagementFilter --> SessionManagementFilter: 2.1 request.setAttribute\n(FILTER_APPLIED, Boolean.TRUE)\n\
设置session已处理
SessionManagementFilter -> HttpSessionSecurityContextRepository: 3 containsContext(request)\n检测Repository是否有授权缓存
activate SessionManagementFilter
activate HttpSessionSecurityContextRepository
HttpSessionSecurityContextRepository --> SessionManagementFilter: 3.1 返回Repository 是否有授权缓存
alt 3.1 Repository 有授权缓存, do nothing
deactivate HttpSessionSecurityContextRepository
deactivate SessionManagementFilter
else 3.1 Repository 没有授权缓存
SessionManagementFilter -> SecurityContextHolder: 4 SecurityContextHolder\n\
     .getContext()\n\
     .getAuthentication()\n\
     从SecurityContext中获取认证信息
activate SecurityContextHolder
activate SessionManagementFilter
SecurityContextHolder --> SessionManagementFilter: 4.1 返回 authentication
deactivate SecurityContextHolder
deactivate SessionManagementFilter
SessionManagementFilter --> SessionManagementFilter: 4.2 authentication != null\n\
     && !trustResolver.isAnonymous\n     (authentication)\n\
     检测authentication是否存在且不为匿名用户
alt 4.2 authentication 不存在或存在但为匿名用户

SessionManagementFilter --> SessionManagementFilter: 4.3 request.getRequestedSessionId() != null\n\
   && !request.isRequestedSessionIdValid()\n   检测是request否有sessionId且\n   sessionId是否有效且是否过期,被锁等
alt 4.3 request session 有效, do nothing
else 4.3 request session 无效
participant DefaultRedirectInvalidSessionStrategy #ff9800
SessionManagementFilter -> DefaultRedirectInvalidSessionStrategy: 4.3.1 onInvalidSessionDetected\n(request, response)
activate DefaultRedirectInvalidSessionStrategy
DefaultRedirectInvalidSessionStrategy -> DefaultRedirectStrategy: 4.3.1.1 sendRedirect\n(request,response, destinationUrl)
activate DefaultRedirectStrategy
participant BaseSecurityController #ff9800
DefaultRedirectStrategy -> BaseSecurityController: 4.3.1.2 跳转到 /session/invalid
activate BaseSecurityController
BaseSecurityController -> AuthenticationUtil: 4.3.1.2.1 redirectProcessingByLoginProcessType(..)
activate AuthenticationUtil
AuthenticationUtil --> client: 4.3.1.2.2 返回 logoutSuccessUrl
AuthenticationUtil --> BaseSecurityController: 4.3.1.2.2 返回
deactivate AuthenticationUtil
BaseSecurityController --> DefaultRedirectStrategy: 4.3.1.3 返回
deactivate BaseSecurityController
DefaultRedirectStrategy --> DefaultRedirectInvalidSessionStrategy: 4.3.1.3 返回
deactivate DefaultRedirectStrategy
DefaultRedirectInvalidSessionStrategy --> SessionManagementFilter: 4.3.2 返回
deactivate DefaultRedirectInvalidSessionStrategy
end
else 4.2 authentication 存在且不为匿名用户
SessionManagementFilter -> CompositeSessionAuthenticationStrategy: 4.3 onAuthentication\n\
     (authentication, request, response)
activate SessionManagementFilter
activate CompositeSessionAuthenticationStrategy
CompositeSessionAuthenticationStrategy --> CompositeSessionAuthenticationStrategy: 4.3.1 遍历 delegateStrategies
participant EnhanceConcurrentControlAuthenticationStrategy #ff9800
CompositeSessionAuthenticationStrategy -> EnhanceConcurrentControlAuthenticationStrategy: 4.3.1.1 onAuthentication\n\
(authentication, request, response)
EnhanceConcurrentControlAuthenticationStrategy -> EnhanceConcurrentControlAuthenticationStrategy: 4.3.1.2\n\
onAuthentication\n\
(authentication, request, response)
activate EnhanceConcurrentControlAuthenticationStrategy
EnhanceConcurrentControlAuthenticationStrategy -> EnhanceConcurrentControlAuthenticationStrategy: 4.3.1.2.1\n\
isSessionNumberControl
alt 4.3.1.2.1 sessionNumberControl 为 true 进行 concurrent session control 逻辑
participant SessionRegistry #ff9800
EnhanceConcurrentControlAuthenticationStrategy -> SessionRegistry: 4.3.1.2.1.1\n\
getAllSessions\n\
(authentication.getPrincipal(), false)
activate EnhanceConcurrentControlAuthenticationStrategy
activate SessionRegistry
SessionRegistry --> EnhanceConcurrentControlAuthenticationStrategy: 4.3.1.2.1.1.1\n 返回sessions
deactivate SessionRegistry
deactivate EnhanceConcurrentControlAuthenticationStrategy
EnhanceConcurrentControlAuthenticationStrategy --> EnhanceConcurrentControlAuthenticationStrategy: 4.3.1.2.1.2\n\
sessions.size();\n\
getMaximumSessionsForThisUser\n(authentication);\n\
...\n\
allowableSessionsExceeded\n(sessions, allowedSessions, sessionRegistry)
else 4.3.1.2.1 sessionNumberControl 为 false 进行 change session id and session fixation protection 逻辑
EnhanceConcurrentControlAuthenticationStrategy --> EnhanceConcurrentControlAuthenticationStrategy: 4.3.1.2.1.3\n\
...\n\
applySessionFixation(request);\n\
...\n\
onSessionChange\n(originalSessionId, session, authentication);\n
participant SessionEnhanceCheckService #ff9800
EnhanceConcurrentControlAuthenticationStrategy -> SessionEnhanceCheckService: 4.3.1.2.1.4\n\
setEnhanceCheckValue(session, request)
activate EnhanceConcurrentControlAuthenticationStrategy
activate SessionEnhanceCheckService
SessionEnhanceCheckService --> EnhanceConcurrentControlAuthenticationStrategy: 4.3.1.2.1.4.1\n\ 返回
deactivate SessionEnhanceCheckService
deactivate EnhanceConcurrentControlAuthenticationStrategy
end
EnhanceConcurrentControlAuthenticationStrategy --> CompositeSessionAuthenticationStrategy: 4.3.1.3 返回
deactivate EnhanceConcurrentControlAuthenticationStrategy
CompositeSessionAuthenticationStrategy --> SessionManagementFilter: 4.3.2 正常返回或返回异常
deactivate CompositeSessionAuthenticationStrategy
deactivate SessionManagementFilter
alt 4.3.2 正常返回
SessionManagementFilter -> HttpSessionSecurityContextRepository: 4.3.3 \n\
saveContext(\nSecurityContextHolder.getContext(),\n\
request, response)
activate SessionManagementFilter
activate HttpSessionSecurityContextRepository
HttpSessionSecurityContextRepository --> HttpSessionSecurityContextRepository: 4.3.3.1 saveContext
HttpSessionSecurityContextRepository --> SessionManagementFilter: 4.3.3.2 返回
deactivate HttpSessionSecurityContextRepository
deactivate SessionManagementFilter
SessionManagementFilter --> OtherFilter: 5 chain.doFilter\n(request, response)
OtherFilter --> OtherFilter: 后面步骤略
else 4.3.2 返回异常
SessionManagementFilter --> SessionManagementFilter: 4.3.4 SecurityContextHolder.clearContext()
SessionManagementFilter -> BaseAuthenticationFailureHandler: 4.3.5 onAuthenticationFailure(request, response, e)
activate SessionManagementFilter
activate BaseAuthenticationFailureHandler
BaseAuthenticationFailureHandler -> BaseAuthenticationFailureHandler: 4.3.5.1 处理逻辑...
BaseAuthenticationFailureHandler --> client: 4.3.5.2 根据 ACCEPT 返回对应的 Json 数据或网页
BaseAuthenticationFailureHandler --> SessionManagementFilter: 4.3.5.3 返回

deactivate BaseAuthenticationFailureHandler
deactivate SessionManagementFilter
deactivate SessionManagementFilter

end
end
end
end


client --> client: session 流程结束

== API ==
note over BaseAuthenticationFailureHandler: api \n\
认证失败处理器, 继承此类后，\n\
再向 IOC 容器注册自己来实现自定义功能。\n\
默认为 ClientAuthenticationFailureHandler
note over BaseSecurityController: api\n\
客户端 url 认证与授权的路由控制\n\
与 session 失效后处理的控制器接口\n\
 实现此接口并注册到 IOC 容器，\n\
则会替换 ClientSecurityController
note over DefaultRedirectInvalidSessionStrategy: api \n\
    Performs a redirect to a fixed URL\n\
when an invalid requested session is detected\n\
     by the SessionManagementFilter\n\
       继承此类并注入 IOC 容器会替换此类
note over EnhanceConcurrentControlAuthenticationStrategy: api\n\
组合了 \n\
ConcurrentSessionControlAuthenticationStrategy\n\
与ChangeSessionIdAuthenticationStrategy.\n\
 增加 client 特征的校验, 增强 csrf 防范.\n\
   继承此类后注入 IOC 容器可替换此类
note over SessionRegistry: api 根据 StoreType 类型\n\
通过 spring.session.storeType 配置\n\
(同时要添加相应Spring session的依赖)\n\
    生成不同的 SessionRegistry
note over SessionEnhanceCheckService: api:          对 client 端特征码的鉴别\n\
                  用于防范 csrf 攻击\n\
                实现此接口并注入 IOC 容器\n会根据实现的逻辑对 request 进行安全验证.

@enduml