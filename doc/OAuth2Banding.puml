@startuml

browser --> browser: OAuth2登录绑定/解绑开始,\n 前提用户已登录

opt 绑定逻辑
browser -> Server: 1 /banding.html 绑定逻辑
Server --> browser: 1.1 /banding.html
participant BandingConnectController #ff9800
browser -> BandingConnectController: 1.2 /connect/qq (post)
activate BandingConnectController
BandingConnectController -> ConnectInterceptor: 1.2.1 perConnect(connectionFactory,\n  params, request)\n 预处理拦截器
ConnectInterceptor --> BandingConnectController: 1.3 返回
participant BandingConnectSupport #ff9800
activate BandingConnectController
BandingConnectController -> BandingConnectSupport: 1.4 buildOAuthUrl(connectionFactory,\n request,params,providerId)
opt 构建第三方授权的url
BandingConnectSupport --> BandingConnectSupport: 1.4.1 buildOAuth2Url(connectionFactory,\n request, additionalParams, providerId)
activate BandingConnectSupport
note left : 添加统一的回调地址由 callbackUrl(request) 设置，\n功能性回调地址由此处通过generateState() 注入 state。
BandingConnectSupport --> BandingConnectSupport: 1.4.1.1 getOAuth2Parameters()
activate BandingConnectSupport
BandingConnectSupport --> BandingConnectSupport: 1.4.1.2.1 <back:cadetblue>调用callbackUrl(request)</back>\n <back:cadetblue>设置统一的回调地址参数/auth/callback</back>
BandingConnectSupport --> BandingConnectSupport: 1.4.1.2.2 设置 scope 等参数
BandingConnectSupport --> BandingConnectSupport: 1.4.1.2.3 返回oAuth2Parameters
deactivate BandingConnectSupport
participant BaseOAuth2ConnectionFactory #ff9800
BandingConnectSupport -> BaseOAuth2ConnectionFactory: 1.4.1.3.1 generateState("/connect/"\n  + providerId),\n <back:cadetblue>原始回调地址/connect/qq</back>\n<back:cadetblue>通过加密原回调地址放入state中<back>
activate BandingConnectSupport
BaseOAuth2ConnectionFactory --> BandingConnectSupport: 1.4.1.4 \n 返回state并设置到\n oAuth2Parameters中
deactivate BandingConnectSupport
alt 构建授权url
BandingConnectSupport --> BandingConnectSupport: 1.4.2 useAuthenticateUrl=false
BandingConnectSupport -> OAuth2Template: 1.4.3.1 buildAuthorizeUrl\n (oAuth2Parameters)
OAuth2Template --> BandingConnectSupport: 1.4.4 返回 AuthorizeUrl
BandingConnectSupport --> BandingConnectController: 1.5 返回 AuthorizeUrl
else 构建鉴定 url
BandingConnectSupport -> OAuth2Template: 1.4.3.1 buildAuthenticateUrl\n (oAuth2Parameters)
OAuth2Template --> BandingConnectSupport: 1.4.4 返回 AuthenticateUrl
BandingConnectSupport --> BandingConnectController: 1.5 返回 AuthenticateUrl
end
end
deactivate BandingConnectSupport
deactivate BandingConnectController
BandingConnectController -> 第三方服务商API: 1.6 RedirectView(AuthorizeUrl/AuthenticateUrl)\n 跳转到第三方授权
deactivate BandingConnectController
第三方服务商API -> SocialController: 1.7 /auth/callback
SocialController --> BandingConnectController: 1.8 <back:cadetblue>统一回调路由处理</back>\n<back:cadetblue>解析state获取到</back>\n <back:cadetblue>原始回调地址/connect/qq?code=..并跳转</back>
activate BandingConnectController
opt 从第三方服务商获取用户信息
BandingConnectController -> BandingConnectSupport: 1.9 completeConnection\n (connectionFactory,\n request, providerId)
activate BandingConnectController
activate BandingConnectSupport
BandingConnectSupport --> BandingConnectSupport: 1.9.1 verifyStateParameter(request) \n 校验state是否合法
BandingConnectSupport --> BandingConnectSupport: 1.9.2 callbackUrl(request)\n 获取回调地址 redirectUrl
BandingConnectSupport -> OAuth2Template: 1.9.3.1 exchangeForAccess(code,\n redirectUrl, null)
activate BandingConnectSupport
activate OAuth2Template
OAuth2Template --> OAuth2Template: 1.9.3.2 postForAccessGrant\n (accessTokenUrl, params)\n 获取从第三方服务商用户信息
OAuth2Template -> BandingConnectSupport: 1.9.4 返回 accessGrant
deactivate OAuth2Template
deactivate BandingConnectSupport
BandingConnectSupport -> BaseOAuth2ConnectionFactory: 1.9.5 createConnection(accessGrant)
activate BandingConnectSupport
BaseOAuth2ConnectionFactory --> BandingConnectSupport: 1.9.6 返回 BandingConnectSupport
BandingConnectSupport --> BandingConnectController: 1.10 返回 connection
deactivate BandingConnectSupport
deactivate BandingConnectSupport
end
deactivate BandingConnectController
opt 保存用户信息
BandingConnectController --> BandingConnectController: 1.11 addConnection(connection,\n  connectionFactory, request)\n 用户信息持久化到到第三方用户表
activate BandingConnectController
BandingConnectController --> BaseOAuth2ConnectionFactory: 1.11.1 addConnection(connection,\n  connectionFactory, request)\n 用户信息持久化到到第三方用户表
BaseOAuth2ConnectionFactory --> BandingConnectController: 1.11.2 返回
BandingConnectController --> BandingConnectController: 1.11.3 postConnect\n(connectionFactory,connection,request)
BandingConnectController --> BandingConnectController: 1.11.4 返回
end
deactivate BandingConnectController
opt 返回绑定、解绑结果视图
BandingConnectController --> BandingConnectController: 1.12 connectionStatusRedirect\n (providerId, request),\n 设置跳转视图。
activate BandingConnectController
BandingConnectController --> BandingConnectController: 1.13 返回 RedirectView()\n 默认跳转到connectionStatus
deactivate BandingConnectController
deactivate BandingConnectController
BandingConnectController --> BandingConnectController: 1.13.1 跳转RedirectView()\n 默认跳转到connectionStatus\n /connect/{providerId}
activate BandingConnectController
BandingConnectController -> BandingConnectController: 1.13.2 processFlash(request, model)
BandingConnectController -> JdbcConnectionRepository: 1.13.3 findConnections(providerId)
JdbcConnectionRepository --> BandingConnectController: 1.14 返回 connections
BandingConnectController -> BandingConnectController: 1.15 setNoCache(request)
alt 绑定失败
BandingConnectController --> browser: 1.16 如果 connections 为空，\n跳转到/connect/{providerId}Connect
else 绑定成功
BandingConnectController --> browser: 1.16 如果 connections 不为空，\n跳转到/connect/{providerId}Connected
end
deactivate BandingConnectController
end
end
opt 解绑逻辑
browser -> Server: 2 /banding.html 解绑逻辑
Server --> browser: 2.1 /banding.html
browser -> BandingConnectController: 2.2 /connect/qq (delete)
activate BandingConnectController
BandingConnectController --> BandingConnectController: 2.3 getConnectionFactory\n (providerId)
BandingConnectController --> BandingConnectController: 2.4 preDisconnect\n (connectionFactory, request)
BandingConnectController -> BaseOAuth2ConnectionFactory: 2.5 removeConnections\n (providerId)
activate BandingConnectController
BaseOAuth2ConnectionFactory --> BandingConnectController: 2.6 返回
deactivate BandingConnectController
BandingConnectController --> BandingConnectController: 2.7 postDisconnect\n (connectionFactory, request)

opt 返回绑定、解绑结果视图
BandingConnectController --> BandingConnectController: 1.8 connectionStatusRedirect\n (providerId, request),\n 设置跳转视图。
activate BandingConnectController
BandingConnectController --> BandingConnectController: 1.8.1 返回 RedirectView()\n 默认跳转到connectionStatus
deactivate BandingConnectController
deactivate BandingConnectController
BandingConnectController --> BandingConnectController: 1.9 跳转RedirectView()\n 默认跳转到connectionStatus\n /connect/{providerId}
activate BandingConnectController
BandingConnectController -> BandingConnectController: 1.9.1 processFlash(request, model)
BandingConnectController -> JdbcConnectionRepository: 1.9.2 findConnections(providerId)
JdbcConnectionRepository --> BandingConnectController: 1.10 返回 connections
BandingConnectController -> BandingConnectController: 1.11 setNoCache(request)
alt 绑定失败
BandingConnectController --> browser: 1.12 如果 connections 为空，\n跳转到/connect/{providerId}Connect
else 绑定成功
BandingConnectController --> browser: 1.12 如果 connections 不为空，\n跳转到/connect/{providerId}Connected
end
deactivate BandingConnectController
end

browser --> browser: OAuth2登录绑定/解绑结束

participant OAuthJdbcUsersConnectionRepositoryFactory #ff9800
OAuthJdbcUsersConnectionRepositoryFactory -> OAuthJdbcUsersConnectionRepository: getUsersConnectionRepository(..)
OAuthJdbcUsersConnectionRepository -> JdbcConnectionRepository: createConnectionRepository(userId)

== API ==
note over BandingConnectController: api 可以根据\n自己的需求自定义\n如把用户session放入redis等
note over BandingConnectSupport: api 可以根据\n自己的需求自定义
note over BaseOAuth2ConnectionFactory: 扩展 OAuth2ConnectionFactory\n添加专门为多个回调地址添加路由功能方法 generateState(String)\n方便对于多个回调地址进行路由管理。\n 注意： 所有第三方登录的\n org.springframework.social.connect.ConnectionFactory\n必须继承此抽象工厂。
note over OAuthJdbcUsersConnectionRepositoryFactory: api UsersConnectionRepositoryFactory 接口实现\n 用户需要对第三方 SocialProperties.tableName 用户表更改时\n要实现此接口 UsersConnectionRepositoryFactory\n 自定义的接口实现并注入 IOC 容器会自动覆盖此类

@enduml